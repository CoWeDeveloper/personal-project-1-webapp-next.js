// pages/api/sitemap.xml.ts

import { NextApiRequest, NextApiResponse } from 'next';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

const SITE_URL = 'https://www.cloudtenants.com'; // Replace with your site's URL

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  // Fetch dynamic blog posts from the database
  const blogs = await prisma.blog.findMany({
    select: {
      id: true,
      date: true,
    },
  });

  // Generate sitemap XML
  const sitemap = generateSiteMap(blogs);

  // Set the content type to XML and send the response
  res.setHeader('Content-Type', 'text/xml');
  res.write(sitemap);
  res.end();
}

// Function to generate the sitemap XML string
const generateSiteMap = (blogs: { id: number; date: string }[]) => {
  // Static URLs
  const staticUrls = `
  <url>
    <loc>${SITE_URL}/</loc>
    <lastmod>2024-07-11T06:48:26+00:00</lastmod>
    <priority>1.00</priority>
  </url>
  <url>
    <loc>${SITE_URL}/about</loc>
    <lastmod>2024-07-11T06:48:26+00:00</lastmod>
    <priority>0.80</priority>
  </url>
  <url>
    <loc>${SITE_URL}/networks</loc>
    <lastmod>2024-07-11T06:48:26+00:00</lastmod>
    <priority>0.80</priority>
  </url>
  <!-- Add other static URLs here -->
  `;

  // Dynamic Blog URLs
  const dynamicUrls = blogs
    .map(blog => {
      return `
      <url>
        <loc>${`${SITE_URL}/blogs/${blog.id}`}</loc>
        <lastmod>${new Date(blog.date).toISOString()}</lastmod>
        <priority>0.80</priority>
      </url>
      `;
    })
    .join('');

  // Combine static and dynamic URLs into the final sitemap XML
  return `<?xml version="1.0" encoding="UTF-8"?>
  <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd">
    ${staticUrls}
    ${dynamicUrls}
  </urlset>`;
};
